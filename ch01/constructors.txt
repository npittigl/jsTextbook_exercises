CONSTRUCTOR: special method of a CLASS for creating and initializing an object instance of that class

CLASS: are a template for creating objects & are built on prototypes

PROTOTYPES: inheritance refers to passing down characteristics from a parent to a child, so that a new piece of code can resuse and build upon the features of an existing one 

- JS implements inheritance by using OBJECTS

- each object has an internal link to another object called its PROTOTYPES
    - the prototype object has a prototype of its own, and so on until an object is reached with NULL as its prototype

    - by definition, NULL has no prototype and acts as a final link in this prototype chain

    - possible to mutate any member of the prototype chain or even swap out the prototype at runtime, so concepts like STATIC dispatching do not exist in JS

- JS does not have static types like class-based languages (Java, C++)

- JS does not have "methods" in the form of that class-based languages define them

- in JS any function can be added to an object in the form of a property

- an inherited function acts just as any other property

- when an inherited function is executed, the value 'this' points to the INHERITING object, not to the prototype object where the function is an own property

const parent = {
    value: 2,
    method() {
        return this.value + 1;
    },
};

console.log(parent.method()); // 3
// when calling parent.method in this case, 'this' refers to the parent 

// child is an object that inherits from parent
const child = {
    _proto_: parent,
}

console.log(child.method()); // 3
// when child.method is called, 'this' refers to child

// so when child inherits the method of parent, the property 'value' is sought on child. 

    //HOWEVER, since child doesn't have an own property called 'value'. the property is found on the [[Prototype]], which is parent.value

child.value = 4; // assign value 4 to the property 'value' on child

    // this shadows the 'value' property on parent
    
    // the child object now looks like:

    { value: 4, _proto_: { value:2, method: [Function]} }

console.log(child.method()); // 5

    // since the child now has the 'value' property, 'this.value' means child.value instead


CONSTRUCTORS

- the power of prototypes is that we can reuse a set of properties if they should be present on every instance - especially for methods

Suppose we are to create a series of boxes, where each box is an object that contains a value which can be accessed through a getValue function. A naive implementation would be:

    const boxes = [
    { value: 1, getValue() { return this.value; } },
    { value: 2, getValue() { return this.value; } },
    { value: 3, getValue() { return this.value; } },
    ];


This is subpar, because each instance has its own function property that does the same thing, which is REDUNDANT & UNNECESSARY

Instead, we can move getValue to the [[Prototype]] of all boxes:

    const boxPrototype = {
        getValue() {
            return this.value;
        },
    };

    const boxes = [
        { value: 1, __proto__: boxPrototype },
        { value: 2, __proto__: boxPrototype },
        { value: 3, __proto__: boxPrototype },
    ];

- this way all boxes' 'getValue' method will refer to teh same function, lowering memory usage

- but manually binding _proto_ for each object creation is still inconvenient

- this is when we would use a CONSTRUCTOR function -> which automatically sets the [[Prototype]] for every object created

- Constructors are functions called with new

    // A constructor function:
    function Box(value) {
        this.value = value;
    }

    // Properties all boxes created from the Box() constructor will have:
    Box.prototype.getValue = function () {
        return this.value;
    };

    const boxes = [new Box(1), new Box(2), new Box(3)];

- we say that 'new Box(1)' is an INSTANCE creatd from the "Box" constructor function

- Box.prototype is not much different from boxPrototype object we created before - it's just a plain object

- every instance created from a constructors function will automatically have the constructor's PROTOTYPE property as its [[Prototype]]. That is, 

    Object.getPrototypeOf(new Box()) === Box.prototype

- Constructor.prototype by default has one own property: constructor, which references the constructor function itself

    - that is, 
    Box.prototype.constructor === Box

    - this allows one to access the original constructor from any instance (newly created object)

The above constructor function can be rewritten in classes as:

    class Box {
        constructor(value) {
            this.value = value;
        }

        // Methods are created on Box.prototype
        getValue() {
            return this.value;
        }
    }




